import asyncio
from datetime import datetime
import logging
from random import choice
import requests
from string import ascii_letters

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, IDFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand
from aiogram.types import InlineKeyboardButton as Button
from aiogram.types import InlineKeyboardMarkup as Markup

from game import WordleManager

# –¢–æ–∫–µ–Ω –∏–∑ @BotFather
token = '5393671799:AAHegR2MM6TQTk8N5ck6pd9PdDIuTFDHvrs'

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = Bot(token=token, parse_mode='HTML')

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç Telegram
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
logger = logging.getLogger('@main')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–Ω—è
correct_word = "empty"

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
admins = [
    124361528
]


class UserState(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    first_name = State()
    last_name = State()
    age = State()

    word_input = State()


async def set_commands(bot: Bot):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    commands: list[BotCommand] = [
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
        BotCommand("weather", "–ü–æ–≥–æ–¥–∞ –≤ –ë—Ä—è–Ω—Å–∫–µ"),
        BotCommand("file", "–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª (/file –∏–º—è_—Ñ–∞–π–ª–∞)"),
        BotCommand("dev", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"),
        BotCommand("cat", "–°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫ –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"),
        BotCommand("dog", "–°–ª—É—á–∞–π–Ω—ã–π –ø—ë—Å–∏–∫ –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"),
        BotCommand("yes_or_no", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç"),
        BotCommand("wordle", "–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É"),
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands(commands)


@dp.message_handler(commands=['cancel'], state='*')
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∏–º–µ–Ω–∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç, {}!\n"
        "–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ –∫–Ω–æ–ø–∫–µ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è —á–∞—Ç–∞. "
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help."
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
    if (data.get('first_name', ""), data.get('last_name', "")) == ("", ""):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        name = message.from_user.full_name

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è
        text += f"\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? "
        text += "(–µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: /cancel)"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await UserState.first_name.set()
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
    else:
        name = ' '.join(
            [data.get('first_name'), data.get('last_name')]
        )

    await message.answer(text.format(name))


@dp.message_handler(state=UserState.first_name)
async def got_first_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –µ—ë —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    first_name = message.text.capitalize()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data({'first_name': first_name})

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"–•–æ—Ä–æ—à–æ, {first_name}, –∞ –ø–æ–¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–µ–π —Ñ–∞–º–∏–ª–∏–µ–π?"
        "\n\n–û—Ç–º–µ–Ω–∞: /cancel"
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await UserState.next()


@dp.message_handler(state=UserState.last_name)
async def got_last_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_name = data.get('first_name')

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–∏—à–µ–º –µ—ë —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
    last_name = message.text.capitalize()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–º–∏–ª–∏—é –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data({'last_name': last_name})

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"{first_name} {last_name}. –ö–∞–∫ —Ö–æ—Ä–æ—à–æ –∑–≤—É—á–∏—Ç! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"
        "\n\n–û—Ç–º–µ–Ω–∞: /cancel"
    )

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await UserState.next()


@dp.message_handler(state=UserState.age)
async def got_age(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ
    if not message.text.isdigit():
        return await message.answer(
            "–ù–µ –¥—É–º–∞—é, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            "\n\n–û—Ç–º–µ–Ω–∞: /cancel"
        )

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É
    age = int(message.text)

    # –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –±–æ–ª—å—à–æ–π, –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ
    if not 12 <= age <= 99:
        return await message.answer(
            "–ü–æ–ª–∞–≥–∞—é, —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            "\n\n–û—Ç–º–µ–Ω–∞: /cancel"
        )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    first_name = data.get('first_name')
    last_name = data.get('last_name')

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data({'age': age})

    # –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–≥–æ–¥/–≥–æ–¥–∞/–ª–µ—Ç)
    if str(age)[-1] == '1':
        age_text = '–≥–æ–¥'
    elif str(age)[-1] in '234':
        age_text = '–≥–æ–¥–∞'
    else:
        age_text = '–ª–µ—Ç'

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"–í–æ—Ç, —á—Ç–æ —è –æ —Ç–µ–±–µ —É–∑–Ω–∞–ª:\n\n"

        f"<b>–ò–º—è:</b> {first_name}\n"
        f"<b>–§–∞–º–∏–ª–∏—è:</b> {last_name}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age} {age_text}\n\n"

        f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞—é: –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–Ω–æ–ø–∫–µ ¬´–ú–µ–Ω—é¬ª –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await state.reset_state(with_data=False)


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ
    commands = await bot.get_my_commands()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ ¬´–∫–æ–º–∞–Ω–¥–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ¬ª
    commands_list = [f"/{cmd.command} ‚Äî {cmd.description}" for cmd in commands]

    # –°–æ–∑–¥–∞—ë–º str, –≥–¥–µ –∫–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    commands_text = '\n'.join(commands_list)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "<b><u>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:</u></b>\n\n" + commands_text
    text += "\n\n–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –º–Ω–µ —Ñ–∞–π–ª, —è –Ω–∞–¥—ë–∂–Ω–æ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é –≤ —Å–≤–æ–µ–π –ø–∞–ø–∫–µ –∏ –¥–∞–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å."

    await message.answer(text)


@dp.message_handler(Text(contains="–ø–æ–≥–æ–¥", ignore_case=True))
@dp.message_handler(commands=['weather'], state='*')
async def weather(message: types.Message):
    # OpenWeatherMap API URL
    api_url = 'http://api.openweathermap.org/data/2.5/weather'

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    # id - –≥–æ—Ä–æ–¥, appid - API —Ç–æ–∫–µ–Ω
    params = {
        'id': 571476,
        'appid': 'e9c3a204b56b981c281dad540173c4c3',
        'lang': 'ru',
        'units': 'metric'
    }

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ –≤ JSON
    response = requests.get(api_url, params).json()

    # ! –ü–∞—Ä—Å–∏–Ω–≥ JSON
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã (—è—Å–Ω–æ, –æ–±–ª–∞—á–Ω–æ –∏ —Ç.–ø.)
    weather = str(response['weather'][0]['description'])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–∑–¥—É—Ö–∞
    temp = int(response['main']['temp'])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞
    humidity = response['main']['humidity']

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞—Ç–∞ –∏–∑ UNIX Timestamp
    sunrise = datetime.fromtimestamp(
        response['sys']['sunrise']).strftime('%H:%M')
    sunset = datetime.fromtimestamp(
        response['sys']['sunset']).strftime('%H:%M')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã
    kb = Markup(row_width=1).add(
        Button(text='Gismeteo',
               url='https://www.gismeteo.ru/weather-bryansk-4258/'),
        Button(text='–Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥–∞',
               url='https://yandex.ru/pogoda/bryansk'),
        Button(text='Google –ü–æ–≥–æ–¥–∞',
               url='https://www.google.com/search?q=–ü–æ–≥–æ–¥–∞+–≤+–ë—Ä—è–Ω—Å–∫–µ')
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f'‚òÅÔ∏è <b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ë—Ä—è–Ω—Å–∫–µ:</b> <i>{weather}, {temp}¬∞C</i>\n'
        f'üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> <i>{humidity}%</i>\n'
        f'üåû <b>–†–∞—Å—Å–≤–µ—Ç:</b> <code>{sunrise}</code>\n'
        f'üåù <b>–ó–∞–∫–∞—Ç:</b> <code>{sunset}</code>'
    )

    await message.answer(text, reply_markup=kb)


@dp.message_handler(commands=['file'], state='*')
async def file(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.get_args()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª —Ñ–∞–π–ª, –æ—Ç–≤–µ—Ç–∏–º –µ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if args == '':
        return await message.answer(
            '‚Ñπ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> <code>/file –∏–º—è_—Ñ–∞–π–ª–∞</code>'
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –æ—Ç–≤–µ—Ç–∏–º –µ–º—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if len(args.split()) != 1:
        return await message.answer(
            '‚Ñπ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> <code>/file –∏–º—è_—Ñ–∞–π–ª–∞</code>'
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª –≤ –∫–æ–º–∞–Ω–¥—É –∏–º—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ
    try:
        with open(f'./files/{args}', 'rb') as file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_chat_action(types.ChatActions.UPLOAD_DOCUMENT)
            await message.answer_document(
                file,
                caption=f"‚úÖ –í–æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≤–∞–º–∏ —Ñ–∞–π–ª <code>{args}</code>."
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (open() –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É), —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º
        return await message.answer(
            f'‚ùå <b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</b> <code>{args}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω.</b>'
        )


@dp.message_handler(content_types=['document'], state='*')
async def upload_document(message: types.Message):
    name = message.document.file_name
    await message.document.download(destination_file=f'./files/{name}')
    await message.answer(
        '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –≤ –ø–∞–ø–∫—É –±–æ—Ç–∞!\n'
        f'–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É <code>/file {name}</code>'
    )


@dp.message_handler(commands=['dev'], state='*')
async def dev(message: types.Message):
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É VK
    keyboard = Markup().add(Button('–°—Ç—Ä–∞–Ω–∏—Ü–∞ VK', 'https://vk.com/kostia.erokhin'))
    await message.answer('üë®‚Äçüíª')
    await message.answer(
        text="<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –ï—Ä–æ—Ö–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω",
        reply_markup=keyboard)


@dp.message_handler(commands=['cat'], state='*')
async def cat(message: types.Message):
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    await message.answer_chat_action(types.ChatActions.UPLOAD_PHOTO)

    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –æ—Ç API
    file_url: str = requests.get('https://aws.random.cat/meow').json()['file']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
    await message.answer_photo(photo=file_url, caption="–°–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ—Ç–∏–∫ üòª")


@dp.message_handler(commands=['dog'], state='*')
async def dog(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –æ—Ç API
    file_url: str = requests.get('https://random.dog/woof.json').json()['url']

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å—å
    caption = "–í–∑–≥–ª—è–Ω–∏ –Ω–∞ —ç—Ç–æ–≥–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—ë—Å–∏–∫–∞ üê∂"

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –≥–∏—Ñ–∫–∞
    if file_url.lower().endswith('.gif'):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        await message.answer_chat_action(types.ChatActions.UPLOAD_VIDEO)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_animation(animation=file_url, caption=caption)

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –≤–∏–¥–µ–æ
    elif file_url.lower().endswith('.webm') or file_url.lower().endswith('.mp4'):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        await message.answer_chat_action(types.ChatActions.UPLOAD_VIDEO)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_video(video=file_url, caption=caption)

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ–∫–∞, —Ç–æ –µ—Å—Ç—å —Ñ–æ—Ç–æ
    else:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        await message.answer_chat_action(types.ChatActions.UPLOAD_PHOTO)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await message.answer_photo(photo=file_url, caption=caption)


@dp.message_handler(commands=['yes_or_no'], state='*')
async def yes_or_no(message: types.Message):
    await message.answer_chat_action(types.ChatActions.UPLOAD_VIDEO)

    # –ü–æ–ª—É—á–∞–µ–º response –æ—Ç API
    response = requests.get('https://yesno.wtf/api').json()

    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –∏–∑ response –æ—Ç API
    file_url: str = response['image']

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –¥–∞/–Ω–µ—Ç/–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑ response –æ—Ç API
    ru_answers = {
        'yes': '–¥–∞',
        'no': '–Ω–µ—Ç',
        'maybe': '–≤–æ–∑–º–æ–∂–Ω–æ'
    }

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    answer = ru_answers[response['answer']]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É
    await message.answer_animation(animation=file_url, caption=f"–û—Ç–≤–µ—Ç: {answer}")


@dp.message_handler(commands=['wordle'], state='*')
async def wordle(message: types.Message, state: FSMContext):
    with WordleManager(correct_word) as manager:
        data = await state.get_data()
        words = data.get('words', [])

        manager.bulk_draw_words(words)

        text = (
            "== <u>Wordle</u> ==\n\n"
            f"‚öñÔ∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b> {6 - len(words)}\n"
            f"‚åõ –û–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —Å–ª–æ–≤–æ... –ï—Å–ª–∏ —É–∂–µ –Ω–µ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å: /cancel"
        )

        await message.answer_photo(types.InputFile(manager.image_bytes), text)
        await UserState.word_input.set()


def until_next_word():
    now = datetime.today()
    tomorrow = datetime(now.year, now.month, now.day)
    d = tomorrow - now
    mm, ss = divmod(d.seconds, 60)
    hh, mm = divmod(mm, 60)

    delta = ":".join(map(str, [hh, mm, ss]))
    return delta


@dp.message_handler(state=UserState.word_input)
async def wordle_got_word(message: types.Message, state: FSMContext):
    text = ""

    if len(message.text) != 5 or not message.text.isalpha():
        return await message.answer("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É (–∏–ª–∏ /cancel).")

    for letter in message.text:
        if letter in ascii_letters:
            return await message.answer("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É (–∏–ª–∏ /cancel).")

    with WordleManager(correct_word) as manager:
        data = await state.get_data()
        words = data.get('words', [])
        words.append(message.text.lower())
        await state.update_data({'words': words})

        manager.bulk_draw_words(words)

        if manager.is_finished:
            await state.update_data({'wordle_available': False})

            delta = until_next_word()

            text = (
                "== <u>Wordle</u> ==\n\n"
                f"üèÜ –¢—ã —É—Å–ø–µ—à–Ω–æ —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ {correct_word}!\n"
                f"‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {len(words)} / 6\n"
                f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {delta} (–ª–∏–±–æ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ /new_word)."
            )
            await state.reset_state(with_data=False)
        else:
            if len(words) == 6:
                delta = until_next_word()
                text = (
                    "== <u>Wordle</u> ==\n\n"
                    f"üìù <b>–°–ª–æ–≤–æ <u>{message.text}</u> –ø—Ä–∏–Ω—è—Ç–æ. –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.</b>\n\n"
                    f"‚öñÔ∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b> {6 - len(words)}\n"
                    f"üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ {correct_word}.\n"
                    f"‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {delta} (–ª–∏–±–æ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ /new_word)."
                )
                await state.reset_state(with_data=False)
            else:
                text = (
                    "== <u>Wordle</u> ==\n\n"
                    f"üìù <b>–°–ª–æ–≤–æ <u>{message.text}</u> –ø—Ä–∏–Ω—è—Ç–æ. –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.</b>\n\n"
                    f"‚öñÔ∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫:</b> {6 - len(words)}\n"
                    f"‚åõ –û–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —Å–ª–æ–≤–æ... –ï—Å–ª–∏ —É–∂–µ –Ω–µ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å: /cancel"
                )

        return await message.answer_photo(types.InputFile(manager.image_bytes), text)


@dp.message_handler(IDFilter(admins), commands=['new_word'], state='*')
async def new_word(message: types.Message, state: FSMContext):
    load_word()
    await message.answer(
        f"–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ. –í–æ—Ç –æ–Ω–æ: <tg-spoiler>{correct_word}</tg-spoiler>.\n"
        "–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /wordle –¥–ª—è –∏–≥—Ä—ã.")
    logger.info(f'–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ: {correct_word}')


def load_word():
    with open('./game/assets/words.txt', 'r', encoding='UTF-8') as file:
        global correct_word
        words = file.read().splitlines()
        correct_word = choice(words)


async def main():
    # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        datefmt='%d.%m.%Y | %H:%M:%S',
        format="[%(asctime)s] %(levelname)s: %(name)s - %(message)s",
    )

    # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    bot_obj = await bot.get_me()
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {bot_obj.full_name} (@{bot_obj.username})...")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await set_commands(bot)

    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞ –¥–Ω—è
    load_word()
    logger.info(f'–°–ª–æ–≤–æ –¥–Ω—è: {correct_word}')

    # –ü—Ä–æ–ø—É—Å–∫ –∞–ø–¥–µ–π—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫ long-polling
    try:
        await dp.skip_updates()
        await dp.start_polling()
    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º FSM
    finally:
        logger.error('Terminating bot...')
        await dp.storage.close()
        await dp.storage.wait_closed()
        await bot.session.close()
        logger.error('Goodbye!')


if __name__ == "__main__":
    asyncio.run(main())
